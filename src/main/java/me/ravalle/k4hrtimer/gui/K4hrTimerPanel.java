package me.ravalle.k4hrtimer.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import me.ravalle.k4hrtimer.K4hrTimer;
import me.ravalle.k4hrtimer.K4hrTimerSettings;
import xyz.duncanruns.jingle.gui.JingleGUI;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class K4hrTimerPanel {
    public JPanel mainPanel;
    private JButton btnResetCurrentAttempt;
    private JButton recordsPath;
    private JSpinner aimingForXRuns;
    private JSpinner numHours;
    private JCheckBox cbEnableTimer;

    public K4hrTimerPanel() {
        $$$setupUI$$$();
        saveAndReloadGUI();

        btnResetCurrentAttempt.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (!e.getComponent().isEnabled()) {
                    return;
                }
                K4hrTimer.bopAllRecords();
                saveAndReloadGUI();
            }
        });

        cbEnableTimer.addItemListener(e -> { toggleTimerEnabled(e.getStateChange() == ItemEvent.SELECTED); saveAndReloadGUI(); });

        aimingForXRuns.addChangeListener(e -> { K4hrTimerSettings.getInstance().aimingForXRuns = (int) aimingForXRuns.getValue(); saveAndReloadGUI(); });

        numHours.addChangeListener(e -> { K4hrTimerSettings.getInstance().hours = (int) numHours.getValue(); saveAndReloadGUI(); });
    }

    private void saveAndReloadGUI() {
        K4hrTimerSettings.save();

        toggleTimerEnabled(K4hrTimerSettings.getInstance().timerEnabled);
        aimingForXRuns.setValue(K4hrTimerSettings.getInstance().aimingForXRuns);
        numHours.setValue(K4hrTimerSettings.getInstance().hours);
        recordsPath.setText(K4hrTimerSettings.getInstance().recordsPath);

        JingleGUI.get().refreshQuickActions();
    }

    public void toggleTimerEnabled(boolean enabled) {
        K4hrTimerSettings.getInstance().timerEnabled = enabled;
        cbEnableTimer.setSelected(enabled);
        btnResetCurrentAttempt.setEnabled(enabled);
        aimingForXRuns.setEnabled(enabled);
        numHours.setEnabled(enabled);
        recordsPath.setEnabled(enabled);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(6, 3, new Insets(5, 5, 5, 5), -1, -1));
        recordsPath = new JButton();
        recordsPath.setText("");
        mainPanel.add(recordsPath, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        aimingForXRuns = new JSpinner();
        mainPanel.add(aimingForXRuns, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        numHours = new JSpinner();
        mainPanel.add(numHours, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Aiming for # runs");
        mainPanel.add(label1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        mainPanel.add(spacer2, new GridConstraints(0, 2, 6, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Records path:");
        mainPanel.add(label2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnResetCurrentAttempt = new JButton();
        btnResetCurrentAttempt.setText("Reset Current Attempt (DELETES ALL RECORDS)");
        mainPanel.add(btnResetCurrentAttempt, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cbEnableTimer = new JCheckBox();
        cbEnableTimer.setText("Enable Timer");
        mainPanel.add(cbEnableTimer, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Hours");
        mainPanel.add(label3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
